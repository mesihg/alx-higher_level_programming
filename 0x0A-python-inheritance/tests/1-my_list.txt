``1-my_list`` module
=======================

Using ``MyList class``
=====================

Import the class from the module:
    >>> MyList = __import__("1-my_list").MyList


Testing docstring for the module:
    >>> dst = __import__("1-my_list").__doc__
    >>> len(dst) > 1
    True

Testing docstring for the class:
    >>> dst = __import__("1-my_list").MyList.__doc__
    >>> len(dst) > 1
    True

Testing docstring for the method:
    >>> dst = __import__("1-my_list").MyList.print_sorted.__doc__
    >>> len(dst) > 1
    True

Testing if MyList is a subclass of list:
    >>> issubclass(MyList, list)
    True

Testing with empty list:
    >>> ls = MyList()
    >>> ls.print_sorted()
    []

Test for append method with list comprehension:
    >>> ls = MyList()
    >>> [ls.append(i) for i in range(1, 5)]
    [None, None, None, None]
    >>> ls.print_sorted()
    [1, 2, 3, 4]


Test for append method with negative numbers:
    >>> ls = MyList()
    >>> ls.append(-1)
    >>> ls.append(-2)
    >>> ls.append(-3)
    >>> ls.append(-4)
    >>> ls.print_sorted()
    [-4, -3, -2, -1]


Testing with only one argument:
    >>> ls = MyList()
    >>> ls.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given
